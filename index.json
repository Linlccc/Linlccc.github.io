[{"content":" 使用折叠简码 123\ncssscccs\n123456789 123456789 123456789\n二级标题 三级标题 四级标题 五级标题 六级标题 段落正常字体 段落斜体 段落粗体 段落粗斜体\n删除线 下划线\n无序项 有序项1 有序项2 有序项3 嵌套项 嵌套项 区块引用\n一层嵌套引用\n二层嵌套引用\n十层嵌套引用\u0026hellip;..\nprintf(\u0026quot;这是一个代码片段\u0026quot;); //代码片段\n1 2 printf(\u0026#34;这是一个代码块\u0026#34;); //代码块 左对齐 居中 右对齐 这是一个单元格 这是一个单元格 这是一个单元格 这是一个单元格 这是一个单元格 这是一个单元格 内联方式超链接\n引用方式超链接\n图片方式 图片 图片内联 图片引用 图片内联超链接 图片引用超链接 **使用转义字符**\nLaTeX_($LaTeX: E=mc^2$)_LaTex $$LaTeX: E=mc^2$$\n1 2 3 4 5 6 7 8 9 10 11 12 ,数值一,数值二,数值三 类型1,5000,8000,4000 类型2,3000,1000,4000 类型3,5000,7000,6000 类型4,7000,2000,3000 type: column title: 柱状图 x.title: 类型 x.suffix: 单位x y.title: 数值 y.suffix: 单位y 1 e^{i\\pi} + 1 = 0 //(Just English Allow Here) 1 2 3 4 5 6 graph TD A[开始A] --\u0026gt; B(过程B) B --\u0026gt; C{判断条件C} C --\u0026gt;|条件C1| D[结束D] C --\u0026gt;|条件C2| E[结束E] C --\u0026gt;|条件C3| F[结束F] 1 2 3 sequenceDiagram A-\u0026gt;\u0026gt;B: 是否已收到消息？ B--\u0026gt;\u0026gt;A: 已收到消息 1 2 3 4 5 6 7 8 9 gantt title 甘特图 dateFormat YYYY-MM-DD section 项目A 任务1: duty1, 2018-01-01, 30d 任务2: 20d section 项目B 任务3: 2018-01-01, 10d 任务4: after duty1, 20d 快捷键 功能 键位 新建 Markdown 笔记 Ctrl+Alt+D 粗体 Ctrl+B 斜体 Ctrl+I 删除线 Ctrl+T 下划线 Ctrl+U 分隔线 Ctrl + Shift + - 编号列表 Ctrl + Shift + O 项目符号列表 Ctrl + Shift + W 插入待办事项 Ctrl + Shift + C 代码块 Ctrl+Shift+L 插入日期和时间 Alt + Shift + D 撤销 Ctrl+Z 在笔记内搜索 Ctrl+F Test TTTTTTT\n下面是一张图片 Code 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // 语法结构 while (条件){ 需要执行的代码 } // 该循环永远不会结束，这可能导致浏览器崩溃。 while(true){ console.log(\u0026#39;加菲猫！\u0026#39;) } const arr = [\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,undefined,\u0026#39;3\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;4\u0026#39;]; let i = 0; while(arr[i]){ console.log(arr[i]) i = i + 1; } // 输出: 1 // 输出: 2 const arr = [\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;3\u0026#39;,\u0026#39;4\u0026#39;]; let i = 0; while(arr[i]){ console.log(arr[i]) i = i + 1; } Code 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 static void Web() { // 加载配置 string webConfigFile = \u0026#34;WebConfig.json\u0026#34;; WebConfig webConfig; if (!File.Exists(webConfigFile)) { webConfig = new(); webConfig.Port = 8082; File.WriteAllText(webConfigFile, JsonConvert.SerializeObject(webConfig, Formatting.Indented)); } else webConfig = JsonConvert.DeserializeObject\u0026lt;WebConfig\u0026gt;(File.ReadAllText(webConfigFile))!; Serve.Run(RunOptions.Default .Silence() .AddComponent\u0026lt;ServeServiceComponent\u0026gt;().UseComponent\u0026lt;ServeApplicationComponent\u0026gt;() .ConfigureServices(services =\u0026gt; { services.AddJwt(); services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); }) .ConfigureBuilder(builder =\u0026gt; { builder.WebHost.UseUrls($\u0026#34;http://*:{webConfig.Port}\u0026#34;); }) .Configure(app =\u0026gt; { app.UseInject(option =\u0026gt; { option.ConfigureSwaggerUI(ui =\u0026gt; { ui.RoutePrefix = \u0026#34;swagger\u0026#34;; }); }); app.UseAuthentication(); app.UseAuthorization(); })); //Serve.Run($\u0026#34;http://*:{webConfig.Port}\u0026#34;, silence: true, additional: services =\u0026gt; //{ // services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); //}); } Table 账户 密码 备注 asdasd asdasd aaa asdasd asdasd aaa asdasd asdasd aaa Code 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 static void Web() { // 加载配置 string webConfigFile = \u0026#34;WebConfig.json\u0026#34;; WebConfig webConfig; if (!File.Exists(webConfigFile)) { webConfig = new(); webConfig.Port = 8082; File.WriteAllText(webConfigFile, JsonConvert.SerializeObject(webConfig, Formatting.Indented)); } else webConfig = JsonConvert.DeserializeObject\u0026lt;WebConfig\u0026gt;(File.ReadAllText(webConfigFile))!; Serve.Run(RunOptions.Default .Silence() .AddComponent\u0026lt;ServeServiceComponent\u0026gt;().UseComponent\u0026lt;ServeApplicationComponent\u0026gt;() .ConfigureServices(services =\u0026gt; { services.AddJwt(); services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); }) .ConfigureBuilder(builder =\u0026gt; { builder.WebHost.UseUrls($\u0026#34;http://*:{webConfig.Port}\u0026#34;); }) .Configure(app =\u0026gt; { app.UseInject(option =\u0026gt; { option.ConfigureSwaggerUI(ui =\u0026gt; { ui.RoutePrefix = \u0026#34;swagger\u0026#34;; }); }); app.UseAuthentication(); app.UseAuthorization(); })); //Serve.Run($\u0026#34;http://*:{webConfig.Port}\u0026#34;, silence: true, additional: services =\u0026gt; //{ // services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); //}); } ","permalink":"https://linlccc.com/posts/test/","summary":"测试文章摘要","title":"这是一篇测试文章"},{"content":"概念 每一个模板都有一个名为 Page 数据对象\nPage 信息参考：Page 信息参考\n基础语法 访问变量 1 2 {{ .Titel }} // 访问已存在的变量 {{ $address }} // 访问自定义变量 声明变量与赋值 1 2 3 4 {{ $address := \u0026#34;http://www.baidu.com\u0026#34; }} // 声明自定义变量并赋值 {{ $msg := `Line one. Line two.` }} // 支持多行字符串 {{ $msg = \u0026#34;\u0026#34; }} // 将msg的值修改为空字符串 条件语句 条件语句 if/with 都以 {{ end }} 结束\n在hugo模板中，条件语句的条件可以是任何表达式，而不仅仅是布尔类型的表达式，以下情况会被认为是false：\n空字符串 \u0026quot;\u0026quot; 空数组 [] 空字典 map[] 空指针 nil 数值 0 布尔值 false if 很多情况下建议使用 with 语句，而不是 if 语句，因为 with 语句可以重新绑定上下文，而 if 语句不能\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 {{ if .IsHome }} {{ end }} // 判断 IsHome 的值 {{ if eq .Title \u0026#34;Home\u0026#34; }} {{ end }} // 判断变量是否相等 {{ if ne .Title \u0026#34;Home\u0026#34; }} {{ end }} // 判断变量是否不相等 {{ if and .IsHome .Params.show }} {{ end }} // 判断多个条件是否同时满足 {{ if or .IsHome .Params.show }} {{ end }} // 判断多个条件是否有一个满足 {{ if not .IsHome }} {{ end }} // 判断条件是否不满足 // 该示例和 with 的第一个示例做完全相同的事 {{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;h4\u0026gt;{{ index .Params \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt; {{ end }} // 但是 if 可是使用 else if 语句 {{ if (isset .Params \u0026#34;description\u0026#34;) }} {{ index .Params \u0026#34;description\u0026#34; }} {{ else if (isset .Params \u0026#34;summary\u0026#34;) }} {{ index .Params \u0026#34;summary\u0026#34; }} {{ else }} {{ .Summary }} {{ end }} // 使用 or/and , 只要 .Params.title 或者 .Params.caption 有一个存在，并且 .Params.attr 存在，就会执行该块 {{ if (and (or (isset .Params \u0026#34;title\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;)) (isset .Params \u0026#34;attr\u0026#34;)) }} \u0026lt;div class=\u0026#34;caption {{ index .Params \u0026#34;attr\u0026#34; }}\u0026#34;\u0026gt; {{ if (isset .Params \u0026#34;title\u0026#34;) }} \u0026lt;h4\u0026gt;{{ index .Params \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt; {{ end }} {{ if (isset .Params \u0026#34;caption\u0026#34;) }} \u0026lt;p\u0026gt;{{ index .Params \u0026#34;caption\u0026#34; }}\u0026lt;/p\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} with with在其范围内重新绑定上下文.\n1 2 3 4 5 6 7 8 9 10 11 // 如果 .Params.title 为空，将跳过该块 {{ with .Params.title }} \u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt; {{ end }} // 如果 Param 设置了 description，那么输出 Param 的 description，否则输出 Summary {{ with .Param \u0026#34;description\u0026#34; }} {{ . }} {{ else }} {{ .Summary }} {{ end }} 函数调用 在hugo模板中，调用函数格式大致如下：{{ funcName arg1 arg2 \u0026hellip; }}\n模板中函数信息参考：模板中函数信息\n1 2 {{ add 1 2 }} // 调用 add 函数，计算 1+2，结果为3 {{ lt 1 2 }} // 调用 lt 函数，计算1\u0026lt;2，结果为true 迭代 迭代语句 range 以 {{ end }} 结束 使用 range 来迭代 map/array/slice 类型变量\n以下是 range 使用的几个示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 这里的上下文 . 是 $array 中的一个元素，要访问全局上下文，需要使用 $. {{ range $array }} {{ . }} {{ end }} // 为数组元素的值声明变量 {{ range $elem_val := $array }} {{ $elem_val }} {{ end }} // 为数组元素的索引和值声明变量 {{ range $elem_index, $elem_val := $array }} {{ $elem_index }} -- {{ $elem_val }} {{ end }} // 为 map 元素的索引和值声明变量 {{ range $elem_key, $elem_val := $map }} {{ $elem_key }} -- {{ $elem_val }} {{ end }} // 传入的 map/array/slice 为空时，执行 else 语句 {{ range $array }} {{ . }} {{else}} // 只有在 $array 为空时才会执行 {{ end }} 遍历其他示例 1 2 3 4 5 6 {{ range .Data.Pages }} // 遍历 Data.Pages {{ range where .Data.Pages \u0026#34;Section\u0026#34; \u0026#34;posts\u0026#34; }} // 遍历 Data.Pages，过滤 Section 为 posts 的数据 {{ range first 10 .Data.Pages }} // 遍历 Data.Pages，取前10条数据 {{ range last 10 .Data.Pages }} // 遍历 Data.Pages，取后10条数据 {{ range after 10 .Data.Pages }} // 遍历 Data.Pages，取第10条数据之后的数据 {{ range until 10 .Data.Pages }} // 遍历 Data.Pages，取第10条数据之前的数据 模板 模板位置始终从hugo目录中的layouts目录开始查找，如果没有找到，就会从主题目录中查找\n如果在主题目录中也没有找到，就会使用默认的模板\n部分模板 使用 partial 函数引用部分模板，部分模板的位置为 layouts/partials。 语法如下：{{ partial \u0026quot;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}\n1 2 {{ partial \u0026#34;header.html\u0026#34; . }} 引用部分模板 layouts/partials/header.html {{ partialCached \u0026#34;header.html\u0026#34; . }} 缓存引用部分模板 layouts/partials/header.html 模板 使用 template 函数引用模板，template 函数用于在更旧的 Hugo 版本中包含部分模板。现在它只对调用内部模板有用。\n内部模板信息参考：内部模板\n查看可用的内部模板：可用的内部模板\n语法如下：{{ template \u0026quot;_internal/\u0026lt;TEMPLATE\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}\n1 2 {{ template \u0026#34;_internal/opengraph.html\u0026#34; . }} 引用内部模板 opengraph.html {{ template \u0026#34;_internal/_default/rss.xml\u0026#34; . }} 引用内部模板 _default/rss.xml 空格符 模板会处理以下空白符\n空格 tab 回车 新行 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;div\u0026gt; {{ .Title }} \u0026lt;/div\u0026gt; // 输出 \u0026lt;div\u0026gt; Hello, World! \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{- .Title -}} \u0026lt;/div\u0026gt; // 输出 \u0026lt;div\u0026gt;Hello, World!\u0026lt;/div\u0026gt; 杂项 1 2 3 4 5 6 7 8 9 10 11 12 13 // 使用名为\u0026#34;main\u0026#34;的块，如果没有定义该块，就会使用默认的块 {{ block \u0026#34;main\u0026#34; . }} // 定义一个名称为\u0026#34;main\u0026#34;的块 {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt; {{ range .Pages }} \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; {{ end }} {{ end }} ","permalink":"https://linlccc.com/posts/hugotemplatebasicsyntax/","summary":"概念 每一个模板都有一个名为 Page 数据对象 Page 信息参考：Page 信息参考 基础语法 访问变量 1 2 {{ .Titel }} // 访问已存在的变量 {{ $address }} // 访问自定义变量 声明变量与","title":"hugo 模板基本语法"},{"content":"正则表达式 1. Safari 处理正则表达式中的前向肯定断言时(?\u0026lt;=\u0026hellip;)，异常 1 2 3 4 // 一下代码在 Chrome 中正常，但在 Safari 中会报错 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/(?\u0026lt;=[?|\u0026amp;]theme=)\\w+/, \u0026#34;dark\u0026#34;); // 解决方案，使用捕捉组+替换字符串的方式 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/([?|\u0026amp;]theme=)\\w+/, \u0026#34;$1dark\u0026#34;); ","permalink":"https://linlccc.com/posts/saferisteppingonthepit/","summary":"正则表达式 1. Safari 处理正则表达式中的前向肯定断言时(?\u0026lt;=\u0026hellip;)，异常 1 2 3 4 // 一下代码在 Chrome 中正常，但在 Safari 中会报错 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/(?\u0026lt;=[?|\u0026amp;]theme=)\\w+/, \u0026#34;dark\u0026#34;); // 解决方","title":"SaferiSteppingOnThePit"},{"content":"游戏1\n","permalink":"https://linlccc.com/games/g1/","summary":"游戏1","title":"G1"},{"content":"这是第二个文章\n","permalink":"https://linlccc.com/posts/second/","summary":"这是第二个文章","title":"这是第二个文章"},{"content":"这是第三个文章 这是第三个文章 Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n下面是一张图片 Code 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 static void Web() { // 加载配置 string webConfigFile = \u0026#34;WebConfig.json\u0026#34;; WebConfig webConfig; if (!File.Exists(webConfigFile)) { webConfig = new(); webConfig.Port = 8082; File.WriteAllText(webConfigFile, JsonConvert.SerializeObject(webConfig, Formatting.Indented)); } else webConfig = JsonConvert.DeserializeObject\u0026lt;WebConfig\u0026gt;(File.ReadAllText(webConfigFile))!; Serve.Run(RunOptions.Default .Silence() .AddComponent\u0026lt;ServeServiceComponent\u0026gt;().UseComponent\u0026lt;ServeApplicationComponent\u0026gt;() .ConfigureServices(services =\u0026gt; { services.AddJwt(); services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); }) .ConfigureBuilder(builder =\u0026gt; { builder.WebHost.UseUrls($\u0026#34;http://*:{webConfig.Port}\u0026#34;); }) .Configure(app =\u0026gt; { app.UseInject(option =\u0026gt; { option.ConfigureSwaggerUI(ui =\u0026gt; { ui.RoutePrefix = \u0026#34;swagger\u0026#34;; }); }); app.UseAuthentication(); app.UseAuthorization(); })); //Serve.Run($\u0026#34;http://*:{webConfig.Port}\u0026#34;, silence: true, additional: services =\u0026gt; //{ // services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); //}); } 账户 密码 备注 asdasd asdasd aaa asdasd asdasd aaa asdasd asdasd aaa Code 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 static void Web() { // 加载配置 string webConfigFile = \u0026#34;WebConfig.json\u0026#34;; WebConfig webConfig; if (!File.Exists(webConfigFile)) { webConfig = new(); webConfig.Port = 8082; File.WriteAllText(webConfigFile, JsonConvert.SerializeObject(webConfig, Formatting.Indented)); } else webConfig = JsonConvert.DeserializeObject\u0026lt;WebConfig\u0026gt;(File.ReadAllText(webConfigFile))!; Serve.Run(RunOptions.Default .Silence() .AddComponent\u0026lt;ServeServiceComponent\u0026gt;().UseComponent\u0026lt;ServeApplicationComponent\u0026gt;() .ConfigureServices(services =\u0026gt; { services.AddJwt(); services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); }) .ConfigureBuilder(builder =\u0026gt; { builder.WebHost.UseUrls($\u0026#34;http://*:{webConfig.Port}\u0026#34;); }) .Configure(app =\u0026gt; { app.UseInject(option =\u0026gt; { option.ConfigureSwaggerUI(ui =\u0026gt; { ui.RoutePrefix = \u0026#34;swagger\u0026#34;; }); }); app.UseAuthentication(); app.UseAuthorization(); })); //Serve.Run($\u0026#34;http://*:{webConfig.Port}\u0026#34;, silence: true, additional: services =\u0026gt; //{ // services.AddJsonOptions(configure =\u0026gt; configure.JsonSerializerOptions.Converters.AddDateTimeTypeConverters(\u0026#34;yyyy-MM-dd HH:mm:ss.fff\u0026#34;)); //}); } ","permalink":"https://linlccc.com/posts/third/","summary":"这是第三个文章 这是第三个文章 Introduction This is bold text, and this is emphasized text. Visit the Hugo website! 下面是一张图片 Code 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33","title":"这是第三个文章"}]