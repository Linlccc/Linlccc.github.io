[{"content":"概念 每一个模板都有一个名为 Page 数据对象\nPage 信息参考：Page 信息参考\n基础语法 访问变量 1 2 {{ .Titel }} // 访问已存在的变量 {{ $address }} // 访问自定义变量 声明变量与赋值 1 2 3 4 {{ $address := \u0026#34;http://www.baidu.com\u0026#34; }} // 声明自定义变量并赋值 {{ $msg := `Line one. Line two.` }} // 支持多行字符串 {{ $msg = \u0026#34;\u0026#34; }} // 将msg的值修改为空字符串 条件语句 条件语句 if/with 都以 {{ end }} 结束\n在hugo模板中，条件语句的条件可以是任何表达式，而不仅仅是布尔类型的表达式，以下情况会被认为是false：\n空字符串 \u0026quot;\u0026quot; 空数组 [] 空字典 map[] 空指针 nil 数值 0 布尔值 false if 很多情况下建议使用 with 语句，而不是 if 语句，因为 with 语句可以重新绑定上下文，而 if 语句不能\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 {{ if .IsHome }} {{ end }} // 判断 IsHome 的值 {{ if eq .Title \u0026#34;Home\u0026#34; }} {{ end }} // 判断变量是否相等 {{ if ne .Title \u0026#34;Home\u0026#34; }} {{ end }} // 判断变量是否不相等 {{ if and .IsHome .Params.show }} {{ end }} // 判断多个条件是否同时满足 {{ if or .IsHome .Params.show }} {{ end }} // 判断多个条件是否有一个满足 {{ if not .IsHome }} {{ end }} // 判断条件是否不满足 {{ if strings.Contains \u0026#34;hugo\u0026#34; \u0026#34;go\u0026#34; }} {{end}} // 判断是否包含指定字符串 // 该示例和 with 的第一个示例做完全相同的事 {{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;h4\u0026gt;{{ index .Params \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt; {{ end }} // 但是 if 可是使用 else if 语句 {{ if (isset .Params \u0026#34;description\u0026#34;) }} {{ index .Params \u0026#34;description\u0026#34; }} {{ else if (isset .Params \u0026#34;summary\u0026#34;) }} {{ index .Params \u0026#34;summary\u0026#34; }} {{ else }} {{ .Summary }} {{ end }} // 使用 or/and , 只要 .Params.title 或者 .Params.caption 有一个存在，并且 .Params.attr 存在，就会执行该块 {{ if (and (or (isset .Params \u0026#34;title\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;)) (isset .Params \u0026#34;attr\u0026#34;)) }} \u0026lt;div class=\u0026#34;caption {{ index .Params \u0026#34;attr\u0026#34; }}\u0026#34;\u0026gt; {{ if (isset .Params \u0026#34;title\u0026#34;) }} \u0026lt;h4\u0026gt;{{ index .Params \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt; {{ end }} {{ if (isset .Params \u0026#34;caption\u0026#34;) }} \u0026lt;p\u0026gt;{{ index .Params \u0026#34;caption\u0026#34; }}\u0026lt;/p\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} with with在其范围内重新绑定上下文.\n1 2 3 4 5 6 7 8 9 10 11 // 如果 .Params.title 为空，将跳过该块 {{ with .Params.title }} \u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt; {{ end }} // 如果 Param 设置了 description，那么输出 Param 的 description，否则输出 Summary {{ with .Param \u0026#34;description\u0026#34; }} {{ . }} {{ else }} {{ .Summary }} {{ end }} 函数调用 在hugo模板中，调用函数格式大致如下：{{ funcName arg1 arg2 \u0026hellip; }}\n模板中函数信息参考：模板中函数信息\n1 2 {{ add 1 2 }} // 调用 add 函数，计算 1+2，结果为3 {{ lt 1 2 }} // 调用 lt 函数，计算1\u0026lt;2，结果为true 迭代 迭代语句 range 以 {{ end }} 结束 使用 range 来迭代 map/array/slice 类型变量\n以下是 range 使用的几个示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 这里的上下文 . 是 $array 中的一个元素，要访问全局上下文，需要使用 $. {{ range $array }} {{ . }} {{ end }} // 为数组元素的值声明变量 {{ range $elem_val := $array }} {{ $elem_val }} {{ end }} // 为数组元素的索引和值声明变量 {{ range $elem_index, $elem_val := $array }} {{ $elem_index }} -- {{ $elem_val }} {{ end }} // 为 map 元素的索引和值声明变量 {{ range $elem_key, $elem_val := $map }} {{ $elem_key }} -- {{ $elem_val }} {{ end }} // 传入的 map/array/slice 为空时，执行 else 语句 {{ range $array }} {{ . }} {{else}} // 只有在 $array 为空时才会执行 {{ end }} 遍历其他示例 1 2 3 4 5 6 {{ range .Data.Pages }} // 遍历 Data.Pages {{ range where .Data.Pages \u0026#34;Section\u0026#34; \u0026#34;posts\u0026#34; }} // 遍历 Data.Pages，过滤 Section 为 posts 的数据 {{ range first 10 .Data.Pages }} // 遍历 Data.Pages，取前10条数据 {{ range last 10 .Data.Pages }} // 遍历 Data.Pages，取后10条数据 {{ range after 10 .Data.Pages }} // 遍历 Data.Pages，取第10条数据之后的数据 {{ range until 10 .Data.Pages }} // 遍历 Data.Pages，取第10条数据之前的数据 cond cond CONTROL VAR1 VAR2 如果 CONTROL 为真，则返回 VAR1，否则返回 VAR2\n模板 模板位置始终从hugo目录中的layouts目录开始查找，如果没有找到，就会从主题目录中查找\n如果在主题目录中也没有找到，就会使用默认的模板\n部分模板 使用 partial 函数引用部分模板，部分模板的位置为 layouts/partials。 语法如下：{{ partial \u0026quot;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}\n1 2 {{ partial \u0026#34;header.html\u0026#34; . }} 引用部分模板 layouts/partials/header.html {{ partialCached \u0026#34;header.html\u0026#34; . }} 缓存引用部分模板 layouts/partials/header.html 多变量部分模板示例 1 2 3 4 5 6 7 // 传入多个变量 {{ partial \u0026#34;header.html\u0026#34; (dict \u0026#34;curremtPage\u0026#34; . \u0026#34;param1\u0026#34; \u0026#34;1\u0026#34; \u0026#34;param2\u0026#34; \u0026#34;2\u0026#34; ) }} // 模板中使用变量 {{ .curremtPage }} -\u0026gt; . {{ .param1 }} -\u0026gt; \u0026#34;1\u0026#34; {{ .param2 }} -\u0026gt; \u0026#34;2\u0026#34; 引用模板 使用 template 函数引用模板，template 函数用于在更旧的 Hugo 版本中包含部分模板。现在它只对调用内部模板有用。\n内部模板信息参考：内部模板\n查看可用的内部模板：可用的内部模板\n语法如下：{{ template \u0026quot;_internal/\u0026lt;TEMPLATE\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}\n1 2 {{ template \u0026#34;_internal/opengraph.html\u0026#34; . }} 引用内部模板 opengraph.html {{ template \u0026#34;_internal/_default/rss.xml\u0026#34; . }} 引用内部模板 _default/rss.xml 空格符 模板会处理以下空白符\n空格 tab 回车 新行 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;div\u0026gt; {{ .Title }} \u0026lt;/div\u0026gt; // 输出 \u0026lt;div\u0026gt; Hello, World! \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{- .Title -}} \u0026lt;/div\u0026gt; // 输出 \u0026lt;div\u0026gt;Hello, World!\u0026lt;/div\u0026gt; 杂项 1 2 3 4 5 6 7 8 9 10 11 12 13 // 使用名为\u0026#34;main\u0026#34;的块，如果没有定义该块，就会使用默认的块 {{ block \u0026#34;main\u0026#34; . }}{{ end }} // 定义一个名称为\u0026#34;main\u0026#34;的块 {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt; {{ range .Pages }} \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; {{ end }} {{ end }} 资源 resources 是一个 Hugo 内置的模块，用于处理网站资源文件，例如图片、CSS、JavaScript 等。它包含了一系列的方法，可以用来获取、操作、组合和匹配资源文件。\nresources.Get: 获取指定路径的资源文件。 resources.Match: 根据指定的 glob 模式匹配资源文件，返回一个资源列表。 resources.Concat: 将多个资源文件合并为一个。 resources.FromString: 从字符串中创建一个资源文件。 resources.ExecuteAsTemplate: 将资源文件作为模板进行解析。 ","permalink":"https://linlccc.com/posts/hugotemplatebasicsyntax/","summary":"概念 每一个模板都有一个名为 Page 数据对象 Page 信息参考：Page 信息参考 基础语法 访问变量 1 2 {{ .Titel }} // 访问已存在的变量 {{ $address }} // 访问自定义变量 声明变量与","title":"hugo 模板基本语法"},{"content":"具体配置可见 NGINX 配置 NGINX 备忘清单\nWeb服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # http server { listen 80; server_name _; location / { root /data; index index.html index.htm; } } # https server { listen 443 ssl; server_name _; ssl_certificate /path/to/certificete.crt; ssl_certificate_key /path/to/private-key.key; location / { root /data; index index.html index.htm; } } 反向代理 1 2 3 4 5 6 7 8 9 server { listen 80; server_name _; location / { proxy_pass http://192.168.241.11; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } 负载均衡 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 upstream web { ip_hash #会话保持 server 192.168.241.22; server 192.168.241.23; } server { listen 80; server_name _; location / { proxy_pass http://web; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } 重定向 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 老域名跳转新域名 server { listen 80; server_name old.cxk.cn; location / { rewrite ^/(.*)$ https://new.cxk.cn/$1; } } # 路径重定向 server { listen 80; server_name old.cxk.cn; location / { rewrite ^/old.cxk.cn/(.*)$ /new-path/$1; } } 防盗链 1 2 3 4 5 6 7 8 9 10 server { listen 80; server_name _; location ~* \\.(gif|jpg|jpeg|png) { valid_referers none blocked *.cxk.cn; if ($invalid_referer) { return 403; } } } 手机端重定向PC 1 2 3 4 5 6 7 8 9 server { listen 80; server_name _; location / { if ($http_user_agent ~* \u0026#39;(android|iphone|ipad)\u0026#39;) { return ^/(.*)$ https://yd.cxk.cn/$1; } } } 基于请求路径转发不同服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server { listen 80; server_name _; location / { proxy_pass http://192.168.241.11; proxy_set_header Host $host; proxy_set_header X-Real_IP $remote_addr; } location /beijing { proxy_pass http://192.168.241.22; proxy_set_header Host $host; proxy_set_header X-Real_IP $remote_addr; } location /nanjing { proxy_pass http://192.168.241.23; proxy_set_header Host $host; proxy_set_header X-Real_IP $remote_addr; } } ","permalink":"https://linlccc.com/posts/nginxconfig/","summary":"具体配置可见 NGINX 配置 NGINX 备忘清单 Web服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # http server { listen 80; server_name _; location / { root /data; index index.html index.htm; } } # https server { listen 443 ssl; server_name _; ssl_certificate /path/to/certificete.crt;","title":"Nginx基础配置"},{"content":"DCL(Data Control Language)数据控制语言 DCL 在 mysql 中可以正常使用其他数据库没测试 用户管理 1 2 3 4 5 6 -- 查询用户 select host,user from mysql.user; -- 添加用户 create user \u0026#39;用户名\u0026#39;@\u0026#39;主机名\u0026#39; identified by \u0026#39;密码\u0026#39;; -- 删除用户 drop user \u0026#39;用户名\u0026#39;@\u0026#39;主机名\u0026#39;; 权限管理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- 查询权限 show grants for \u0026#39;用户名\u0026#39;@\u0026#39;主机名\u0026#39;; -- 查询 root 用户权限 show grants for \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; -- 给予权限 grant 权限列表 on 库名.表名 to \u0026#39;用户名\u0026#39;@\u0026#39;主机名\u0026#39;; -- 给 user1 授予所有权限 grant all on *.* to \u0026#39;user1\u0026#39;@\u0026#39;localhost\u0026#39;; -- 撤销权限 revoke 权限列表 on 库名.表名 from \u0026#39;用户名\u0026#39;@\u0026#39;主机名\u0026#39;; -- 撤销 user1 的所有权限 revoke all on *.* from \u0026#39;user1\u0026#39;@\u0026#39;localhost\u0026#39;; DDL(Data Definition Language)数据定义语言 操作库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- 查看所有数据库 show databases; -- 查看数据库的定义信息 show create database 库名; -- 创建库 create database 库名; -- 检查库是否存在，不存在则创建 create database if not exists 库名; -- 修改数据库字符信息 alter database 库名 character set utf8; -- 删除数据库 drop database 库名; 操作表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -- 查看表结构 desc 表名; -- 查看创建表的SQL语句 show create table 表名; -- 创建表 create table 表名( id int, name varchar(32), age int , score double(4,1), birthday date, insert_time timestamp ); -- 修改表名 alter table 旧表名 rename to 新表名; -- 删除表 drop table 表名; -- 检查表是否存在，存在则删除 drop table if exists 表名; -- 添加一列 alter table 表名 add 列名 数据类型; -- 删除列 alter table 表名 drop 列名; DML(Data Manipulation Language)数据操作语言 插入 insert into 1 2 3 4 -- 写列名 insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n); -- 不写列名 insert into 表名 values(值1,值2,...值n); 删除 delete 1 2 3 4 5 6 -- 删除表中数据 delete from 表名 where 列名 = 值; -- 删除表中所有数据 delete from 表名; -- 删除表中所有数据（直接删除表，再创建一张一样的表） truncate table 表名; 修改 update 1 2 3 4 -- 不带条件的修改(修改所有行) update 表名 set 列名 = 值; -- 带条件的修改 update 表名 set 列名 = 值 where 列名 = 值; DQL(Data Query Language)数据查询语言 基础关键字 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 -- 查询年龄大于等于20 小于等于30 -- \u0026amp;\u0026amp;(并且) select * from 表名 where age \u0026gt;= 20 \u0026amp;\u0026amp; age \u0026lt;= 30; -- and(并且) select * from 表名 where age \u0026gt;= 20 and age \u0026lt;= 30; -- between..and(之间) select * from 表名 where age between 20 and 30; -- 查询年龄22岁，18岁，25岁的信息 -- or(或者) select * from 表名 where age = 22 or age = 18 or age = 25; -- in(集合) select * from 表名 where age in (22,18,25); -- 查询英语成绩不为null -- in not null(不为空) select * from 表名 where english is not null; /** like(模糊查询) _(单个字符) %(多个字符) */ -- 查询性王的人 select * from 表名 where name like \u0026#39;王%\u0026#39;; -- 查询第二个字是麻的人 select * from 表名 where name like \u0026#39;_麻%\u0026#39;; -- 查询名字是三个字的人 select * from 表名 where name like \u0026#39;___\u0026#39;; -- distinct(重复的值都只显示一个) -- 查询年龄集合，重复的只显示一个 select distinct age where 表名; 排序查询 1 2 3 4 -- 根据年龄升序(默认) select * from 表名 order by age; -- 根据年龄降序 select * from 表名 order by age desc; 聚合函数 1 2 3 4 5 6 7 8 9 10 -- 计算数据行数 select max(*) from 表名; -- 计算年龄最大是多少 select max(age) from 表名; -- 计算年龄最小是多少 select min(age) from 表名; -- 计算年龄总和是多少 select sum(age) from 表名; -- 计算年龄平均数是多少 select avg(age) from 表名; 分组查询 group by 1 2 3 4 5 6 -- 按照性别分组,分别查询男、女的平均分、人数 select sex,avg(math),count(id) from 表名 group by sex; -- 将分数高于60的人按照性别分组,分别查询男、女的平均分、人数 select sex,avg(math),count(id) from 表名 where math \u0026gt; 60 group by sex; -- 按照性别分组,分别查询男、女的平均分、人数。要求：分数大于60，分组后人数大于2 select sex,avg(math),count(id) from 表名 where math \u0026gt; 60 group by sex having count(id) \u0026gt; 2; 分页查询 1 2 3 4 5 6 7 8 9 10 11 12 /** 该分页只支持mysql limit 开始索引,查询条数 开始索引计算公式：(页数 - 1) * 每页条数 */ -- 每页显示10条 -- 第一页 select * from 表名 limit 0,10; -- 第二页 select * from 表名 limit 10,10; -- 第三页 select * from 表名 limit 20,10; 内连接查询 1 2 3 4 5 6 7 8 9 10 11 -- 隐式内连接 -- 语法 select 字段列表 from 表1,表2...表n where 条件; -- 例子 select t1.c1,t1.c2,t2.c1 from t1,t2 where t1.t2Id = t2.id; -- 显式内连接 -- 语法 select 字段列表 from 表1 join 表2 on 条件; -- 例子 select * from t1 join t2 on t1.t2Id = t2.id; 外连接查询 1 2 3 4 5 6 7 8 9 10 11 -- 左外连接 -- 语法 select 字段列表 from 表1 left join 表2 on 条件; -- 例子 select t1.*,t2.c1 from t1 left join t2 ON t1.t2Id = t2.id; -- 右外连接 -- 语法 select 字段列表 from 表1 right join 表2 on 条件; -- 例子 select t1.*,t2.c1 from t1 right join t2 ON t1.t2Id = t2.id; 子查询 子查询结果是单行单列 1 2 3 4 5 6 -- 查询最高的成绩（这里假设最高为98） select max(math) from 表名; -- 查询成绩最高的人的信息 select * from 表名 where math = 98; -- 使用子查询 select * from 表名 where math = (select max(math) from 表名); 子查询结果是多行单列 1 2 3 4 5 6 -- 查询名称为n1或者n2的id（这里假设id为1，2） select id from 表名 where name = \u0026#39;n1\u0026#39; or name = \u0026#39;n2\u0026#39;; -- 查询成绩最高的人的信息 select * from 表名 where id = 1 or id = 2; -- 使用子查询 select * from 表名 where id in (select id from 表名 where name = \u0026#39;n1\u0026#39; or name = \u0026#39;n2\u0026#39;); 子查询结果是多行多列 1 2 -- 这里t1和t2是同一张表，查询结果每列有两个相同的数据 select * from 表名 t1,(select * from 表名) t2 where t1.id = t2.id; ","permalink":"https://linlccc.com/posts/commonsql/","summary":"DCL(Data Control Language)数据控制语言 DCL 在 mysql 中可以正常使用其他数据库没测试 用户管理 1 2 3 4 5 6 -- 查询用户 select host,user from mysql.user; -- 添加用户 create user \u0026#39;用户名\u0026","title":"常用SQL"},{"content":"系统指令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 显示系统信息：内核版本、机器类型等 uname # 显示正在运行的Linux内核的发行版本 uname -r # 显示当前时间、系统运行时间、用户和负载平均值 uptime # 显示系统主机名 hostname # 显示当前主机的ip地址 hostname -i # 查看系统最近一次的重启时间以及重启之前的系统登录信息 last reboot # 显示当前日期和时间 date # 设置系统时间与日期 timedatectl # 快速查看当前/指定年份日历 cal # 显示目前登入系统的用户信息 w # 显示当前用户的用户名 whoami # 显示名为\u0026#34;username\u0026#34;的用户的信息 finger username 文件命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # 以长格式列出所有文件的详细信息 ls -al # 显示当前工作目录的路径 pwd # 创建一个名为 dir1 的新目录 mkdir dir1 # 删除名为 file1 的文件 rm file1 # 强制删除名为 file2 的文件 rm -f file2 # 递归删除目录 dir1 及其内容 rm -r dir1 # 强制删除目录 dir1 及其内容 rm -rf dir1 # 复制 file1,创建或覆盖 file2 cp file1 file2 # 将 dir1 复制到 dir2,包括子目录 cp -r dir1 dir2 # 将 file1 重命名或移动到 file2 mv file1 file2 # 创建名为 linkName 到 fileName 的符号链接 ln -s /oath/to/fileName linkName # 创建一个名为 file1 的空文件 touch file1 # 创建/覆盖 file1,等得标准输入 cat \u0026gt; file1 # 逐页显示们 file1 的内容 more file1 # 显示 file1 的前十行 head file1 # 显示 file1 的最后十行 tail file1 # 使用对称密码对 file1 进行加密,需要提供密码短语 gpg -c file1 # 解密 file2.gpg,提示输入密码 gpg file2.gpg # 统计文件中的字数、行数和字符数 wc # 使用管道或文件提供的参数执行命令 xargs 用户管理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 显示用户的UID、GID、组 id # 显示最后登录用户的列表 last # 显示当前登录的用户 who # 创建一个名为 Admin 的新用户组 groupadd admin # 创建一个名为 Sam 的新用户组 adduser Sam # 删除名为 Sam 的用户 userdel Sam # 修改现有用户的属性 usermod 硬件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 内核会将开机过程信息存储在环形缓冲区中 dmesg # 显示 CPU 的详细信息 cat/proc/cpuinfo # 显示详细的系统内存使用信息 cat/proc/meminfo # 列出系统的详细硬件配置 lshw # 列出所有可用的块设备的信息 lsblk # 显示系统内存使用情况 free -m # 以树状格式详细显示 PCI 设备信息 lspci -tv # 以树状格式详细显示 USB 设备信息 lsusb -tv # 显示系统 BIOS 中的硬件信息 dmidecode # 显示磁盘 /dev/sda 的信息 hdparm -i /dev/sda # 用于检查设备 /dev/sda 是否存在坏块,并显示检测进度 badblocks -s /dev/sda 登录 1 2 3 4 5 6 7 8 # 向指定主机名发起 SSH 连接 ssh user@hostname # 使用特定端口发起 SSH 连接 ssh -p portNumber user@hostname # 通过 telnet 连接到主机的默认端口 23 Connect to the host via telnet default port 23 # 通过l elnet 默认端口23连接到主机 telnet host 安装包 1 2 3 4 5 6 7 8 # 使用 RPM 包管理器安装 pkgName.rpm 包 rpm -i pkgName.rpm # 卸载指定的 RPM 包 rpm -e pkgName # 使用 DNF 安装指定的包， dnf install pkgName # 使用 Pacman 安装指定的包 pacman -S 安装源（编译） 1 2 3 4 5 6 # 检查系统兼容性并生成用于软件安装的 makefile ./configure # 按照 makefoile 中的指令编译代码 make # 将编译后的代码安装到指定的系统位置 make install 目录遍历 1 2 3 4 5 6 # 切换到父目录 cd .. # 将当前目录更改为用户的主目录 cd # 将当前目录更改为\u0026#34;/mnt\u0026#34; cd /mnt 流程相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 显示当前进程的快照 ps # 显示运行中的 tolnet 进程的详细信息 ps aux | grep telnet # 显示进程的内存映射 pmap # 显示运行任务的动态实时视图 top # 终止具有 PID 1234 的进程 kill 1234 # 终止所有名为\u0026#39;proc\u0026#39; 的进程 killall proc # 终止具有指定名称的进程 pkill processName # 在后台恢复暂停的作业 bg # 将暂停的作业带到前台 fg # 将作业编号为\u0026#39;n\u0026#39; 的作业移到前台运行 fg n # 列出所有打开的文件和进程 lsof # 更改具有给定 PID 的进程的优先级 renice 19 PID # 显示firefox 进程的进程ID pgrep firefox # 显示运行中的进程树 pstree 网络 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 显示所有网络接口及其信息 ip addr show # 将 IP 地址 192.168.0.1 分配给eth0接口 ip address add 192.168.0.1/24 dev eth0 # 显示网络接口及其配置 ifconfig # 发送 ICMP 数据包,测量与 host 之问的往返时间 ping host # 检索并显示域名的注册信息 whois domain # 查询 DNS,提供域名的 DNS 信息 dig domain # 将 IP 地址解析为主机名,显示 DNS 信息 dig -x host # 对域名进行 IP 查找 host gexample.com # 从指定路径下载文件 wget flePath # 显示各种与网络相关的信息和统计数据 netstat 磁盘使用情况 1 2 3 4 5 6 7 8 9 10 11 12 # 显示所有已挂载文件系统可读的磁盘空问使用情况 df -h # 显示所有已挂载文件系统的 inode 使用情况 df -i # 列出所有驱动器上的分区及其信息 fdisk -l # 显示 /dir1 目录的总磁盘使用大小的摘要,以可读方式呈现 du -sh/dir1 # 显示所有已挂载文件系统及其属性的列表 findmnt # 将设备挂载到指定的文件系统挂载点上 mount devicePath mountPoint 压缩/存档 1 2 3 4 5 6 7 8 # 创建一个名为 backup.tar 的 tar 归档文件,其中包含 /home/ubuntu 目录的内容 tar -cf backup.tar/home/ubuntu # 从 backup.tar 归档文件中提取文件 tar -xf backup.tar # 创建一个名为 backup.tar.gz 的压缩 tar 归档文件,其中包含 /home/ubuntu 目录的内容 tar -zcvf backup.tar.gz/home/ubuntu # 将文件 file1 压缩为 file1.gz,并删除原始文件 gzip file1 日志文件传输 1 2 3 4 5 6 # 将们 file.txt 复制到远程主机的指定目录 scp file.txt remoteuser@remoteHost:/remote/diroctory # 将源目录的内容同步到目标目录,保留属性 rsync -a /home/ubuntu/backup/ # 同步本地目录到远程,保留属性 rsync -a /var/www/web/user@remoteHost:/backup/webBackup/ 搜索 1 2 3 4 5 6 7 8 9 10 # 在文件中搜索给定的模式 grep pattern file # 在 dir1 目录及其子目录中递归搜索指定的 pattern grep -r pattern dir1 # 使用预建的数据库查找名为 file 的文件 locate file # 递归搜索 /home 目录中名为 index 的文件 find /homeName index # 在 /home 目录中查找大小超过 10000k 的文件 find /homeSize +10000k 文件权限 1 2 3 4 5 6 7 8 # 设置文件/data的权限为所有者读/写,组和其他人只读 chmod 644 /data/ # 将目录 /dir1 的权限设置为对所有者可读可写/可执行,对组和其他用户可读/可执行 chmod 755 /dir1 # 将文件 filename 的所有者更改为 bob 并将所属组更改为 devops chown bob:devops filename # 更改目录的所有者和所属组 chown ownername ","permalink":"https://linlccc.com/posts/linuxcommandlist/","summary":"系统指令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 显示系统信息：内核版本、机器类型等 uname # 显示正在运行的Linux内核的发行版本 uname -r #","title":"Linux 命令大全"},{"content":"生成新的 SSH 密钥 在终端中输入以下指令以提供的电子邮件为标签创建SSH密钥 1 ssh-keygen -t rsa -b 4096 -C \u0026#34;[email@example.com]\u0026#34; 根据提示输入密钥保存文件，可空保存到默认文件C:\\Users\\[User]\\.ssh\\id_rsa 根据提示输入两次密码（建议不设置密码，否者每次push都需要输入密码） 将 SSH 密钥添加到 ssh-agent 以管理员权限打开 PowerShell 启动 ssh agent: 1 2 Get-Service -Name ssh-agent | Set-Service -StartupType Manual Start-Service ssh-agent 将 SSH 私钥添加到 ssh-agent (无需管理员权限) 1 ssh-add C:\\Users\\[User]\\.ssh\\id_rsa 移除 SSH 密钥 删除C:\\Users\\[User]\\.ssh\\文件夹中的两个密钥文件 从ssh agent中移除ssh密钥 1 2 3 4 # 查看已加载的密钥列表 ssh-add -l # 移除密钥 ssh-add -d C:\\Users\\[User]\\.ssh\\id_rsa ","permalink":"https://linlccc.com/posts/managessh/","summary":"生成新的 SSH 密钥 在终端中输入以下指令以提供的电子邮件为标签创建SSH密钥 1 ssh-keygen -t rsa -b 4096 -C \u0026#34;[email@example.com]\u0026#34; 根据提示输入密钥保存文件，可空保存到默认文件C:\\Us","title":"管理 SSH"},{"content":"基础 整数类型 这些类型里面除了只有 signed 和 int 的都可以省略 signed / int 例如 short, short int, signed short, signed short int 表示一个类型\n类型 占用字节数 取值范围 signed char 1 -128 到 127 unsigned char 1 0 到 255 short, short int, signed short, signed short int 2 -32768 到 32767 unsigned short, unsigned short int 2 0 到 65535 int, signed, signed int 4 -2147483648 到 2147483647 unsigned, unsigned int 4 0 到 4294967295 long, long int, signed long, signed long int 4 与 int 或 long long 相同 unsigned long, unsigned long int 4 与 unsigned 或 unsigned long long 相同 long long, long long int, signed long long, signed long long int 8 -9223372036854775808 到 9223372036854775807 unsigned long long, unsigned long long int 8 0 到 18446744073709551615 浮点类型 类型 占用字节数 取值范围 float 4 1.175494351e-38 到 3.402823466e+38 double 8 2.2250738585072014e-308 到 1.7976931348623157e+308 long double 12 3.36210314311209350626267781732175260e-4932 到 1.18973149535723176508575932662800702e+4932 无效浮点数信息 在C++中，浮点数类型的值可以是无效的，具体取决于浮点数类型的规范。以下是一些常见的无效浮点数值：\nNaN (Not a Number): 表示无效的计算结果，例如 0.0 / 0.0、sqrt(-1) 等，它可以用 std::numeric_limits\u0026lt;T\u0026gt;::quiet_NaN() 来表示。 Inf (Infinity): 表示除以 0 或者取 log(0) 等无穷值的结果，它可以用 std::numeric_limits\u0026lt;T\u0026gt;::infinity() 来表示。 -Inf (Negative Infinity): 表示除以 -0 或者取 log(-0) 等负无穷值的结果，它可以用 -std::numeric_limits\u0026lt;T\u0026gt;::infinity() 来表示。 denormalized number: 非规格化数，它是一个非零的非规格化浮点数W，不同于规格化数它的指数部分全是 0。在一些平台上，它可能会被截断成 0。 在 C++ 标准库中，可以使用 std::numeric_limits\u0026lt;T\u0026gt; 类模板来获取特定浮点数类型 T 的限制信息，例如 std::numeric_limits\u0026lt;double\u0026gt;::quiet_NaN() 就可以得到 double 类型的 NaN。\n无效浮点数操作 操作 结果 ±value/0 ±Infinity ±Infinity ± value ±Infinity ±Infinity * value ±Infinity ±Infinity / value ±Infinity 0 / 0 NaN ±Infinity / ±Infinity NaN Infinity - Infinity NaN Infinity * 0 NaN 数字字面量 类型 示例 int 42, -123 unsigned int 42u, 123U long 123456L, -123L unsigned long 123456ul, 123ul long long 123456789LL, -123LL unsigned long long 123456789ull, 123ull float 3.14f, -2.5F double 3.14, -2.5 long double 3.14L, -2.5L 进制表示方式 进制 表示方式 示例 二进制 以 0b 或 0B 开头 0b110 八进制 以 0 开头 017 10进制 直接输入数字 123 16进制 以 0x 或 0X 开头 0x1A sizeof 运算符 sizeof(type)：获取类型 type 的大小，返回 size_t 类型的值。 sizeof expression：获取表达式 expression 的大小，返回 size_t 类型的值。 sizeof...：获取模板参数包中元素的个数，返回 size_t 类型的值。这个用法通常用于可变参数模板。 1 2 3 4 5 6 7 8 9 10 11 12 13 // 获取类型的大小 std::cout \u0026lt;\u0026lt; \u0026#34;sizeof(int): \u0026#34; \u0026lt;\u0026lt; sizeof(int) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 获取表达式的大小 int arr[] = {1, 2, 3}; std::cout \u0026lt;\u0026lt; \u0026#34;sizeof(arr): \u0026#34; \u0026lt;\u0026lt; sizeof(arr) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 获取模板参数包中元素的个数 template\u0026lt;typename... Ts\u0026gt; void foo(Ts... args) { std::cout \u0026lt;\u0026lt; \u0026#34;sizeof...(args): \u0026#34; \u0026lt;\u0026lt; sizeof...(args) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } foo(1, \u0026#39;a\u0026#39;, 3.14); // 输出 \u0026#34;sizeof...(args): 3\u0026#34; 数值的上下限 std::numeric_limits\u0026lt;T\u0026gt; 类模板提供了获取数值类型 T 的上下限的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 在整数类型中 min 和 lowest 都是相同的，都是最小值 // 获取 int 类型的上限 std::numeric_limits\u0026lt;int\u0026gt;::max(); // 获取 int 类型的下限 std::numeric_limits\u0026lt;int\u0026gt;::min(); // 以下方法也可以获取下限 std::numeric_limits\u0026lt;int\u0026gt;::lowest(); // 在浮点数类型中，min 和 lowest 不同，min 得到的是最小的正整数，lowest 得到的才是最小的值 // 获取 float 类型的上限（3.40282e+38） std::numeric_limits\u0026lt;float\u0026gt;::max(); // 获取 float 类型的最小的正整数（1.17549e-38） std::numeric_limits\u0026lt;float\u0026gt;::min(); // 获取 float 类型的下限（-3.40282e+38） std::numeric_limits\u0026lt;float\u0026gt;::lowest(); char 、 wchar_t 、 char8_t 、 char16_t 、 char32_t 以上几种都是原生字符类型，用于表示数字、字母、符号等字符。\nchar:\n占用一个字节（8 位） 用于表示单个 8 位字符，即 ASCII 码表中的字符，范围是 0~127 在 C++ 中使用最为广泛，可以用于表示 ANSI 编码和 UTF-8 编码的字符，建议在表示 ASCII 字符时使用。 wchar_t:\n在不同平台上占用的字节数不同，通常为 2 个字节（16 位）或 4 个字节（32 位） 用于表示单个 Unicode 字符，范围是所有 Unicode 字符 在处理 Unicode 字符或多语言环境下有更好的应用场景，建议在需要处理 Unicode 字符时使用。 在些跨平台代码是不建议使用，因为不同平台上的 wchar_t 占用的字节数不同。 char8_t:\n占用一个字节（8 位） 用于表示单个 8 位字符，范围是所有 Unicode 字符中的 ASCII 码表部分，即 0~127 用于表示 UTF-8 编码的字符，建议在需要处理 UTF-8 编码的字符时使用。 char16_t:\n占用两个字节（16 位） 用于表示单个 Unicode 字符，范围是所有 Unicode 字符 用于表示 UTF-16 编码的字符，建议在需要处理 UTF-16 编码的字符时使用。 char32_t:\n占用四个字节（32 位） 用于表示单个 Unicode 字符，范围是所有 Unicode 字符 用于表示 UTF-32 编码的字符，建议在需要处理 UTF-32 编码的字符时使用。 变量初始化赋值 在C++中初始化赋值有三种方式\n建议平时使用花括号表示法，避免隐式类型转换，如果类型不匹配会报错，以达到更好的代码可读性和可维护性 赋值表示法和函数表示法在初始化时不会进行类型检查，如果类型不匹配会进行隐式类型转换（缩窄转换） 赋值表示法和函数表示法在进行缩窄转换时，大多数编译器会发出数据丢失的警告 1 2 3 4 int i = 0; // 赋值表示法 int j(0); // 函数表示法 int k{0}; // 花括号表示法 int l{}; // 这里是默认赋值为0 显示类型转换 类型转换方式 示例 建议使用方式 C风格类型转换 (float) x 不建议使用 静态/强制类型转换 static_cast\u0026lt;float\u0026gt;(x) 建议使用 重新解释类型的转换 reinterpret_cast\u0026lt;float\u0026gt;(x) 转换指针类型时建议使用 旧式的类型转换 float(x) 不建议使用 格式化字符串 std::format std::format 是 C++20 中的新特性，它提供了一种新的字符串格式化方式。该特性可以用来将多种类型的值格式化为字符串，并且支持多种格式控制符，可以更加灵活地控制输出格式。 这里列出格式说明符的一般形式：{[arg_id][:[[fill]align][sign][\u0026quot;#\u0026quot;][\u0026quot;0\u0026quot;][width][\u0026quot;.\u0026quot; precision][\u0026quot;L\u0026quot;][type]]}\narg_id：表示参数的索引, 从 0 开始\nfill：指定填充字符，可以是任意字符。如果省略，则默认为空格。\n1 2 std::format(\u0026#34;|{:\u0026lt;10}|\u0026#34;, \u0026#34;hello\u0026#34;); // |hello | std::format(\u0026#34;|{:*\u0026lt;10}|\u0026#34;, \u0026#34;hello\u0026#34;); // |hello*****| align：指定对齐方式，可以是以下几种：\n\u0026lt;：左对齐。 \u0026gt;: 右对齐。 ^: 居中对齐。 1 2 3 std::format(\u0026#34;|{:\u0026lt;10}|\u0026#34;, \u0026#34;hello\u0026#34;); // |hello | std::format(\u0026#34;|{:\u0026gt;10}|\u0026#34;, \u0026#34;hello\u0026#34;); // | hello| std::format(\u0026#34;|{:^10}|\u0026#34;, \u0026#34;hello\u0026#34;); // | hello | sign：指定符号显示方式，可以是以下几种：\n+：显示正号和负号。 -：只显示负号。 ``（空格）：在正数前面加空格，负数前面加负号（默认）。 1 2 3 4 5 std::format(\u0026#34;|{:+}|\u0026#34;, 10); // |+10| std::format(\u0026#34;|{:+}|\u0026#34;, -10); // |-10| std::format(\u0026#34;|{:-}|\u0026#34;, -10); // |-10| std::format(\u0026#34;|{: }|\u0026#34;, 10); // | 10| std::format(\u0026#34;|{: }|\u0026#34;, -10); // |-10| #：指定转换类型，可以是以下几种：\nb 或 B：二进制。 o 或 O：八进制。 x 或 X：十六进制。 e 或 E：科学计数法。 f 或 F：浮点数（默认）。 g 或 G：自动选择 f 或 e。 a 或 A：十六进制浮点数。 1 2 3 4 5 6 7 std::format(\u0026#34;|{:#x}|\u0026#34;, 255); // |0xff| std::format(\u0026#34;|{:#X}|\u0026#34;, 255); // |0xFF| std::format(\u0026#34;|{:#b}|\u0026#34;, 255); // |0b11111111| std::format(\u0026#34;|{:#o}|\u0026#34;, 255); // |0377| std::format(\u0026#34;|{:.2e}|\u0026#34;, 123.456); // |1.23e+02| std::format(\u0026#34;|{:.2f}|\u0026#34;, 123.456); // |123.46| std::format(\u0026#34;|{:.2g}|\u0026#34;, 123.456); // |1.2e+02| width：指定输出宽度，如果输出的字符串宽度小于指定的宽度，则会在左侧或右侧填充指定字符。\n.precision：指定浮点数输出的精度，即小数点后保留的位数\n常用转义字符 转义字符 含义 \\n 换行符（windows中是\\r\\n） \\r 回车符 \\t 垂直制表符 \\v 水平制表符 \\ 反斜杠 ' 单引号 \u0026quot; 双引号 常用预处理指令 预处理指令 含义 #if 用于条件编译，如果条件为真，则编译后面的代码，否则跳过后面的代码 #ifdef 用于条件编译，如果宏定义了，则编译后面的代码，否则跳过后面的代码 #ifndef 用于条件编译，如果宏没有定义，则编译后面的代码，否则跳过后面的代码 #else 用于条件编译，如果条件为假，则编译后面的代码，否则跳过后面的代码 #endif 用于条件编译，结束条件编译，与 #if 配对使用 #define 用于定义宏，可以用于条件编译，也可以用于替换代码中的字符串 #undef 用于取消宏定义，与 #define 配对使用 #error 用于输出错误信息，编译时会报错 #line 用于指定行号，与 #file 配对使用 #file 用于指定文件名，与 #line 配对使用 #pragma 用于指定编译器的行为，如指定编译器忽略警告 ","permalink":"https://linlccc.com/posts/cppstudynotes/","summary":"基础 整数类型 这些类型里面除了只有 signed 和 int 的都可以省略 signed / int 例如 short, short int, signed short, signed short int 表示一个类型 类型 占用字节数 取值范围 signed char 1 -128 到 127 unsigned char 1 0 到 255 short, short int,","title":"C++ 学习笔记"},{"content":"正则表达式 1. Safari 处理正则表达式中的正向后行断言时(?\u0026lt;=\u0026hellip;)，异常 1 2 3 4 5 6 // 以下代码在 Chrome 中正常，但在 Safari 中会报错 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/(?\u0026lt;=[?|\u0026amp;]theme=)\\w+/, \u0026#34;dark\u0026#34;); // 解决方案，使用捕捉组+替换字符串的方式 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/([?|\u0026amp;]theme=)\\w+/, \u0026#34;$1dark\u0026#34;); // 以上两个执行结果都是 \u0026#34;https://linlccc.com?theme=dark\u0026#34; ","permalink":"https://linlccc.com/posts/saferisteppingonthepit/","summary":"正则表达式 1. Safari 处理正则表达式中的正向后行断言时(?\u0026lt;=\u0026hellip;)，异常 1 2 3 4 5 6 // 以下代码在 Chrome 中正常，但在 Safari 中会报错 \u0026#34;https://linlccc.com?theme=light\u0026#34;.replace(/(?\u0026lt;=[?|\u0026amp;]theme=)\\w+/, \u0026#34;dark\u0026#34;); // 解","title":"踩坑记--Safari之正向后行断言"},{"content":"游戏\n","permalink":"https://linlccc.com/games/g1/","summary":"游戏","title":"G1"},{"content":"游戏\n","permalink":"https://linlccc.com/posts/g1/","summary":"游戏","title":"G1"},{"content":"游戏s\n","permalink":"https://linlccc.com/games/g2/","summary":"游戏s","title":"G2"}]